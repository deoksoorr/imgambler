// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boards    Board[]
}

model Board {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  posts       Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  postKey   String   @unique
  title     String
  content   String
  userCode  String   // 작성자 코드
  user      User?    @relation("UserToPost", fields: [userCode], references: [id])
  fileUrls  String?  // JSON string of file URLs
  createdAt DateTime @default(now())
  updatedAt DateTime?
  isPinned  Boolean  @default(false)
  isNotice  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  views     Int      @default(0)
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id])
  votes     Vote[]
  comments  Comment[]

  @@index([boardId])
  @@index([isPinned])
  @@index([isNotice])
  @@index([createdAt])
}

model Vote {
  id        Int      @id @default(autoincrement())
  userEmail String
  postId    Int
  voteType  String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userEmail, postId])
  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime?
  userEmail String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  parentId  Int?     // 대댓글용 부모 댓글 ID
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
  deleted   Boolean  @default(false)

  @@index([postId])
  @@index([parentId])
}

// NextAuth.js Prisma Adapter 모델 추가
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           String    @default("USER") // ADMIN, MANAGER, USER
  accounts       Account[]
  sessions       Session[]
  posts          Post[]    @relation("UserToPost")
  isAdmin        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([role])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Banner {
  id          Int      @id @default(autoincrement())
  type        String   // 'image' | 'video'
  category    String   @default("MAIN") // MAIN, CASINO
  fileUrl     String?  // 업로드 파일 경로
  externalUrl String?  // 외부 이미지/동영상 URL
  slogan      String?
  buttonText  String?
  buttonLink  String?
  mainLink    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([order])
}

model BannerConfig {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Casino {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  safetyLevel String   // HIGH, VERY HIGH 등
  link        String
  type        String   // 'best' | 'new'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}